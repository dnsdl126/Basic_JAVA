
-- 회원테이블
DROP TABLE tbl_membe
CREATE TABLE tbl_member(
 id VARCHAR2(50) PRIMARY KEY,
 pw VARCHAR2(30) NOT NULL,
 name VARCHAR2(100) NOT NULL,
 phone VARCHAR2(100),
 regdate DATE DEFAULT SYSDATE
 );
 
 INSERT INTO tbl_member(id, pw, name, phone)
  VALUES('admin','1234','무민이','01012345678');
 
  
 INSERT INTO tbl_member(id, pw, name, phone)
  VALUES('user1','1234','무떡이','01036061331');

 
 INSERT INTO tbl_member(id, pw, name, phone)
  VALUES('user2','1234','뇽덕이','01074641103');

SELECT * FROM tbl_member;
 
 commit;
 
 
-- 게시판 테이블--
DROP SEQUENCE seq_board;
DROP TABLE tbl_board;

CREATE TABLE tbl_board(
bno NUMBER PRIMARY KEY,
title VARCHAR2(200) NOT NULL,
content VARCHAR2(500) NOT NULL,
writer VARCHAR2(100) NOT NULL,
viewcnt NUMBER DEFAULT 0,
regdate DATE DEFAULT SYSDATE
);

CREATE SEQUENCE seq_board 
    START WITH 1         
    INCREMENT BY 1     
    NOCYCLE;

INSERT INTO tbl_board(bno, title, content, writer)
VALUES(seq_board.NEXTVAL,'라끼남','요리','김장뇽씨');


INSERT INTO tbl_board(bno, title, content, writer)
VALUES(seq_board.NEXTVAL,'돈잘버는법','경제','김뇽구리');


INSERT INTO tbl_board(bno, title, content, writer)
VALUES(seq_board.NEXTVAL,'인덕이 기르는법','요리','김쪼막지');


INSERT INTO tbl_board(bno, title, content, writer)
VALUES(seq_board.NEXTVAL,'놀리는게 제일 좋아','이벤트','조쨍이');

INSERT INTO tbl_board(bno, title, content, writer)
VALUES(seq_board.NEXTVAL,'세상과 단절','사진','김무국');


COMMIT;

SELECT * FROM tbl_board;

SELECT * FROM tbl_board
		 ORDER BY regdATE DESC; --DESC 는 내림차순
     

--은행테이블--
DROP TABLE tbl_bank;
DROP SEQUENCE seq_bank;

CREATE TABLE tbl_bank(
bno NUMBER PRIMARY KEY,
bname VARCHAR2(50) NOT NULL,
pw VARCHAR2(50) NOT NULL,
money NUMBER DEFAULT 0,
regdate DATE DEFAULT SYSDATE
viewcont NUMBER NULL
);



CREATE SEQUENCE seq_bank
START WITH 101       


    INCREMENT BY 1     
    NOCYCLE;

INSERT INTO tbl_bank(bno,bname,pw)
VALUES (seq_bank.NEXTVAL,'김무츄','1234');

INSERT INTO tbl_bank(bno,bname,pw)
VALUES (seq_bank.NEXTVAL,'김쪼막지','1234');

INSERT INTO tbl_bank(bno,bname,pw)
VALUES (seq_bank.NEXTVAL,'김장김뇽씨','1234');

INSERT INTO tbl_bank(bno,bname,pw)
VALUES (seq_bank.NEXTVAL,'무만이','1234');

INSERT INTO tbl_bank(bno,bname,pw)
VALUES (seq_bank.NEXTVAL,'무떡베베리','1234');


SELECT * FROM tbl_bank;

COMMIT;


--엔터테이먼트 테이블 --
DROP TABLE tbl_enter ;
DROP SEQUENCE seq_enter;

CREATE TABLE tbl_enter(
    ano VARCHAR2(20) PRIMARY KEY, 
    aname VARCHAR2(50) NOT NULL,  
    major VARCHAR2(50) NOT NULL, 
    groupyn VARCHAR2(50) NOT NULL, 
    groupnm VARCHAR(100),          
    sal NUMBER NOT NULL,           
    regdate DATE DEFAULT SYSDATE

);


CREATE SEQUENCE seq_enter 
    START WITH 1         
    INCREMENT BY 1      
    NOCYCLE;             
    
INSERT INTO tbl_enter(ano, aname, major, groupyn, groupnm, sal)
VALUES(seq_enter.NEXTVAL, 사나',가수','Y','트와이스',9900);
INSERT INTO tbl_enter(ano, aname, major, groupyn, groupnm, sal)
VALUES(seq_enter.NEXTVAL, 정연',가수','Y','트와이스',9900);
INSERT INTO tbl_enter(ano, aname, major, groupyn, groupnm, sal)
VALUES(seq_enter.NEXTVAL, 조이',가수','Y','레드벨벳',9900);
INSERT INTO tbl_enter(ano, aname, major, groupyn, groupnm, sal)
VALUES(seq_enter.NEXTVAL, 채연',가수','Y','아이오아이',9900);
INSERT INTO tbl_enter(ano, aname, major, groupyn, groupnm, sal)
VALUES(seq_enter.NEXTVAL, 지효',가수','Y','트와이스',9900);

commit;

SELECT * FROM tbl_enter;


-- 제품판매 테이블 --

 
 DROP TABLE TBL_product;
 DROP SEQUENCE seq_product;
 
 CREATE TABLE tbl_product(
     pno NUMBER PRIMARY KEY,
     pname VARCHAR2(100) NOT NULL UNIQUE,
     company VARCHAR2(100) NOT NULL,
     price NUMBER NOT NULL,
     cnt NUMBER DEFAULT 0,
     regdate DATE DEFAULT SYSDATE
     
 );
 
 CREATE SEQUENCE seq_product
  START WITH 1001
   INCREMENT BY 1
   NOCYCLE;

INSERT INTO tbl_product(pno, pname, company, price, cnt)
VALUES(seq_product.NEXTVAL, '쿠쉬쿠시', '오리온' , 3000, 5);

INSERT INTO tbl_product(pno, pname, company, price, cnt)
VALUES(seq_product.NEXTVAL, '빼빼로', '롯데제과' , 1000, 1);

commit;
SELECT * FROM tbl_product;

ELECT COUNT (*) FROM tbl_product
WHERE pname = '쿠쉬쿠시';

-- 결과 1> 기족에 등록된 제품 -=> 추가기능 작동
-- 결과 0> 처음 입고된 제품 => 등록기능 작동 

UPDATE tbl_product
  SET cnt = cnt + 1
  WHERE pname = '빼빼로';
  
SELECT cnt FROM tbl_product
 WHERE pname = '쿠쉬쿠시';
 

-- 제품 판매 테이블
CREATE TABLE tbl_sale(
    sno NUMBER PRIMARY KEY,
    sname VARCHAR2(100) NOT NULL,
    cnt NUMBER NOT NULL,
    tprice NUMBER NOT NULL,
    regdate DATE DEFAULT SYSDATE
);

DROP SEQUENCE seq_sale;

CREATE SEQUENCE seq_sale
    START WITH 1
    INCREMENT BY 1
    NOCYCLE;
    
INSERT INTO tbl_sale(sno, sname, cnt, tprice)
VALUES(seq_sale.NEXTVAL, '코카콜라', 5, 4500);
INSERT INTO tbl_sale(sno, sname, cnt, tprice)
VALUES(seq_sale.NEXTVAL, '스프라이트', 2, 1600);
INSERT INTO tbl_sale(sno, sname, cnt, tprice)
VALUES(seq_sale.NEXTVAL, '코카콜라', 3, 2700);
INSERT INTO tbl_sale(sno, sname, cnt, tprice)
VALUES(seq_sale.NEXTVAL, '스프라이트', 1, 800);
INSERT INTO tbl_sale(sno, sname, cnt, tprice)
VALUES(seq_sale.NEXTVAL, '스프라이트', 5, 4000);

COMMIT;
--전체 총판매액
SELECT SUM(tprice) FROM tbl_sale;
--제품별 총 판매액
SELECT sname, SUM(tprice) 
FROM tbl_sale
GROUP BY sname;
--오늘 판매한 제품의 총 판매액
SELECT sname, SUM(cnt), SUM(tprice)
FROM tbl_sale
WHERE TO_CHAR(regdate,'YYYYMMDD') = TO_CHAR(SYSDATE,'YYYYMMDD')
GROUP BY sname;
--TO_CHAR : CHAR를 형변환 해라 


DROP TABLE EMP;
DROP TABLE DEPT;
DROP TABLE BONUS;
DROP TABLE SALGRADE;
DROP TABLE DUMMY;
 
CREATE TABLE EMP
       (EMPNO NUMBER(4) PRIMARY KEY,
        ENAME VARCHAR2(10),
        JOB VARCHAR2(9),
        MGR NUMBER(4),
        HIREDATE DATE,
        SAL NUMBER(7, 2),
        COMM NUMBER(7, 2),
        DEPTNO NUMBER(2));
 
INSERT INTO EMP VALUES
        (7369, 'SMITH',  'CLERK',     7902,
        sysdate,  800, NULL, 20);
         
INSERT INTO EMP VALUES
        (7499, 'ALLEN',  'SALESMAN',  7698,
        sysdate, 1600,  300, 30);
         
INSERT INTO EMP VALUES
        (7521, 'WARD',   'SALESMAN',  7698,
        sysdate, 1250,  500, 30);
         
INSERT INTO EMP VALUES
        (7566, 'JONES',  'MANAGER',   7839,
        sysdate,  2975, NULL, 20);
         
INSERT INTO EMP VALUES
        (7654, 'MARTIN', 'SALESMAN',  7698,
        sysdate, 1250, 1400, 30);
         
INSERT INTO EMP VALUES
        (7698, 'BLAKE',  'MANAGER',   7839,
        sysdate,  2850, NULL, 30);
         
INSERT INTO EMP VALUES
        (7782, 'CLARK',  'MANAGER',   7839,
        sysdate,  2450, NULL, 10);
INSERT INTO EMP VALUES
        (7788, 'SCOTT',  'ANALYST',   7566,
        sysdate, 3000, NULL, 20);
         
INSERT INTO EMP VALUES
        (7839, 'KING',   'PRESIDENT', NULL,
        sysdate, 5000, NULL, 10);
         
INSERT INTO EMP VALUES
        (7844, 'TURNER', 'SALESMAN',  7698,
        sysdate,  1500,    0, 30);
         
INSERT INTO EMP VALUES
        (7876, 'ADAMS',  'CLERK',     7788,
        sysdate, 1100, NULL, 20);
         
INSERT INTO EMP VALUES
        (7900, 'JAMES',  'CLERK',     7698,
        sysdate,   950, NULL, 30);
         
INSERT INTO EMP VALUES
        (7902, 'FORD',   'ANALYST',   7566,
        sysdate,  3000, NULL, 20);
         
INSERT INTO EMP VALUES
        (7934, 'MILLER', 'CLERK',     7782,
        sysdate, 1300, NULL, 10);
 
CREATE TABLE DEPT
       (DEPTNO NUMBER(2) PRIMARY KEY,
        DNAME VARCHAR2(14),
        LOC VARCHAR2(13) );
 
INSERT INTO DEPT VALUES (10, 'ACCOUNTING', 'NEW YORK');
INSERT INTO DEPT VALUES (20, 'RESEARCH',   'DALLAS');
INSERT INTO DEPT VALUES (30, 'SALES',      'CHICAGO');
INSERT INTO DEPT VALUES (40, 'OPERATIONS', 'BOSTON');
 
CREATE TABLE BONUS
        (ENAME VARCHAR2(10),
         JOB   VARCHAR2(9),
         SAL   NUMBER,
         COMM  NUMBER);
 
CREATE TABLE SALGRADE
        (GRADE NUMBER,
         LOSAL NUMBER,
         HISAL NUMBER);
 
INSERT INTO SALGRADE VALUES (1,  700, 1200);
INSERT INTO SALGRADE VALUES (2, 1201, 1400);
INSERT INTO SALGRADE VALUES (3, 1401, 2000);
INSERT INTO SALGRADE VALUES (4, 2001, 3000);
INSERT INTO SALGRADE VALUES (5, 3001, 9999);
 
CREATE TABLE DUMMY
        (DUMMY NUMBER);
 
INSERT INTO DUMMY VALUES (0);
 
COMMIT;

SELECT * FROM emp;


-- JOIN
-- 1. 둘 이상의 테이블을 연결하여 하나의 가상테이블을 만드는 것 
-- 2. 보통 둘 이상의 행들의 공통된 값 PK 및 FK값을 사용 하여 조인한다(보통이지 무조건은 아니다)
-- 3. 두개의 테이블을 SELECT 문장 안에서 조인하려면 적어도 하나의
--    컬럼이 두 테이블 사이에서 공유(관계) 되어야 한다 

SELECT * FROM emp; -- deptno : FK키
SELECT * FROM dept; -- deptno : PK키

-- ex) 신입사원은 반드시 하나이상의 부서에 소속되어야 한다.
--     사원은 무조건 부서가 필요 -> 없는 부서로는 소속될수 없다.(반드시 관계를 맺어줘야 한다) 

--JOIN 종류
--1.Equi Join(동등조인)(가장많이 사용)
-- ex)dept 테이블 과 emp테이블을 조인

SELECT emp.empno, emp.ename, dept.dname
FROM dept, emp
WHERE dept.deptno = emp.deptno;

--column
SELECT emp.empno, emp.ename as 사원이름, dept.dname
FROM dept, emp
WHERE dept.deptno = emp.deptno;
--TABLE
SELECT e.empno, e.ename as 사원이름, d.dname
FROM dept d, emp e
WHERE d.deptno = e.deptno;

--2. Inner Join = Equi Join
--ex)dept테이블과 emp테이블을 Inner 조인
-- WHERE 절이 ON절 => JOIN의 조건
SELECT e.empno, e.ename, d.dname
FROM dept d
INNER JOIN emp e
ON d.deptno = e.deptno;

-- 3. Natrual Join == Equi Join
--ex)dept 테이블과 emp테이블을 Natural 조인
-- 동일한 컬럼을 내부적으로 모두 조인,ON절(동등조건)이 생략 가능
SELECT e.empno, e.ename, d.dnme
FROM dept d
NATURAL JOIN emp e;
--USING(deptno); -- 동일한 이름을 가지는 컬럼은 모두 조인됨으로
                 -- USING을 사용하면 컬럼을 선택해서 조인 가능 
                 -- 단 Natural 과 using은 같이 사용이 불가하다
                 -- Natural Join에서 USING절을 사용하고 싶으면 Inner Join으로 변경고 사용 해야한다
                 -- Natural Join을 Inner Join으로 변경하는 방법은 Natraul만 지우면 된다
                 
--4. Non-Equi JOin
--테이블의 어떤 컬럼도 Join할 테이블의 컬럼과 일치하지 않을 때 사용
--조인조건은 동등(=) 이외의 연산자를 사용합니다.
--BETWEEN AND, IS NULL, IS NOT NULL, IN, NOT IN
--거의 사용하지 않는다.
SELECT * FROM salgrade;-- 등급별 연봉최저액~ 최고액
SELECT e.ename, e.sal, s.grade
FROM emp e, salgrade s
WHERE e.sal
BETWEEN s.losal
AND s.hisal;

--5. self Join
-- 테이블은 하나인데 또다른 나를 만들어서 조인 
-- Equi Join과 같으나 하나의 테이블에서 조인이 일어난다는 것이 다르다.
-- 같은 테이블에 대해 두개의 alias를 사용하여 FROM절에 두개의 테이블 사용하는 것 처럼 조인한다.
-- 사원의 매니저 이름을 조회하는 Self Join
SELECT e.ename, a.ename as Manager
FROM emp e, emp a
WHERE e.empno = a.mgr;


--※.Cross Join = Cartesian Product
 -- 조건을 생략할 경우 모든 경우의 수를 다 찾아준다. 
 -- 검색하고자 했던 데이터뿐 아니라 조인에 사용된 테이블들의 모든 데이터가 반환 되는 현상
 --Cartesian Product는ㄴ 조인 조건의 정의하지 않는 경우 발생한다.
 --CROSS JOIN을 사용하면 Cartesian Product값을 얻을 수 있따
 -- ex) CROSS JOIN 절을 이용하여 Cartesian Product 값을 얻는 예제
 SELECT e.empno, e.ename, d.dname
 FROM dept d CROSS JOIN emp e;
 --emp:14개, dept:4개 => 14*4 = 56건출력
 
 --7.Outer Join 
 --Equi Join은 조인을 생성하려는 두개의 테이블을 한쪽 컬럼에 값이 없다면 데이터를 반환하지 못함
 -- 동일 조건에서 조인 조건을 만족하는 값이 없는 행들을 조회하기 위해 Outer Join을 사용
 --Outer Join 연산자는 (+)이다.
 --조인시 값이 없는 조인측에 (+)를 위치 시킨다.
 --Outer Join연산자는 표현식의 한 편에만 올 수 있다.
 --  ex) Equi Join과 Outer Join의 비교
 --   ex1) Equi Join으로 부서 번호를 조회
 SELECT DISTINCT(e.deptno), d.deptno, d.dname
 FROM emp e, dept d
 WHERE e.deptno = d.deptno;
--   ex2) Outer Join으로 부서 번호를 조회 
SELECT DISTINCT(e.deptno), d.deptno, d.dname
 FROM emp e, dept d
 WHERE e.deptno(+) = d.deptno;
--   ex3)LEFT Outer Join (LEFT에 값이 다있다)
SELECT DISTINCT(e.deptno), d.deptno, d.dname
 FROM dept d
 LEFT OUTER JOIN emp e
 ON d.deptno = e.deptno;
 --   ex4)RIGHT Outer Join (RIGHT에 값이
SELECT DISTINCT(e.deptno), d.deptno, d.dname
 FROM emp e
 RIGHT OUTER JOIN dept d
 ON e.deptno = d.deptno;
 --   ex5)FULL Outer Join
SELECT DISTINCT(e.deptno), d.deptno, d.dname
 FROM emp e
 RIGHT OUTER JOIN dept d
 ON e.deptno = d.deptno;
 
 --Oracle 내장함수
 -- : DUAL 테이블
 -- 1. Oracle에서 자체적으로 제공하는 테이블
 -- 2. 간단하게 함수를 이용해서 계산 결과 값을 확인할 때 사용
 -- 3. SYS사용자(신급권한)가 소유하는 Oracle의 표준 테이블
 -- 4. SYS사용자가 소유하지만 어느 사용자든 접근 가능
 -- 5. 오직 한행, 한컬럼만 담고 있는 dummy 테이블
 -- : Dual 테이블 사용용도
 -- 1. 사용자가 함수(계산)을 실행할때 임시로 사용하는데 적합
 -- 2. 함수에 대한 쓰임을 알고 싶을 때 특정 테이블 생성없이 dual을 tkdydgkaus return받을수 있음
 
 --ex) 현재시간 출력
 SELECT SYSDATE FROM DUAL;
 
 --ex) 시퀀스 현재번호 출력
 SELECT seq_sale.CURRVAL FROM DUAL;
 
 --ex) 시퀀스 다음번호 출력
 SELECT seq_sale.NEXTVAL FROM DUAL;
 
 -- 숫자형 함수
 -- 1. ABS 절대값을 반환하는 함수
 SELECT ABS(-1.234) absolute FROM DUAL;
 
 -- 2. CEIL 올림값을 반환하는 함수
 SELECT CEIL(10.1234) FROM DUAL;
 
 --3.FLOR 버림값을 반환하는 함수
 SELECT FLOOR(10.1234) FROM DUAL;
 
 --4.MOD 함수를 M을 N으로 나눈 나머지 반환, n이 0일 경우 M을 반환
 SELECT MOD(9, 4) FROM DUAL;
 
 --5.ROUND n 값의 반올림을 하는 함수로 m은 소숫점 아래 자릴수를 나타냄
 SELECT ROUND(192.153, 1)FROM DUAL;
 SELECT ROUND(192.153, -1)FROM DUAL; 
 
 --6. TRUNC n값을 절삭하는 함수 m은 소숫점 아래 자릿수를 나타냄
SELECT TRUNC(7.5997, 2) FROM DUAL;
SELECT TRUNC(789.5597, -2) FROM DUAL;
 
 --** 문자열 함수
 -- 1.CONCAT 두 문자를 결합, '||' <= LIKE절
 
 -- '%'||keyword ||'%' => '%keyword%'
 SELECT CONCAT('WWW.', 'oracle.')||'com'FROM DUAL;
 
 --2.INITCAP(char), LOWER(char), UPPER(char)
 --INITCAP: 주언진 문자열의 첫 번째 문자를 대문자로 변환
 -- LOWER : 주언진 문자열을 소문자로 변환
 -- UPPER : 주언진 문자열을 대문자로 변환
 SELECT INITCAP('oralce) name FROM DUAL;
 SELECT LOWER('oralce) name FROM DUAL;
 SELECT UPPER('oralce) name FROM DUAL;
 
 -- 3.LENGTH(char), LENGTHB(char)
 -- 문자열의 길이를 반환
SELECT LENGTH('오라클자바') len FROM DUAL; -- 결과:5(순수 글자수)
SELECT LENGTHB('오라클자바') len FROM DUAL; -- 결과:15(글자 바이트수, 한글 1글자당 3byte) 

--4.REPLACE(char1, str1, str2)
-- 문자열의 특정 문자를 다른 문자로 변환
SELECT REPLACE('오라클 자바', '오라클','파이썬')FROM DUAL;

--5.INSTR(char1, str1, m, n)
--문자열이 포함되어 있는지 조사하여 문자열의 위치를 반환, 문자열이 발견되지 않으면 0이 반환
--char1: 지정문자, str1 :검색문자, m:시작위치, n:검색순위
SELECT INSTR('CORPORATE FLOOR', 'OK')FROM DUAL;
SELECT INSTR('CORPORATE FLOOR', 'OR')FROM DUAL;
SELECT INSTR('CORPORATE FLOOR', 'OR', 3, 2)idx FROM DUAL;

--6.TRIM(자주사용)
--좌우 공백 제거
--특정한 문자를 제거, 제거할 문자를 입력하지 않으면 기본적으로 rhdqordl wprj
SELECT TRIM('    오라클 자바')FROM DUAL;

--집계함수
--1. GROUP BY절을 이요하여 그룹 당 하나의 결과로 그룹화 할수있다.
--2.HAVING절을 사용하여 집계함수를 이용한 조건 비교를 할 수 있다.
--3. MIN, MAX 함수는 모든 자료형에 사용할 수 있다.

--1.COUNT
--검색된 행의 수를 반환
SELECT COUNT(deptno) FROM dept;

--2.MAX : 최대값 반환
SELECT MAX(sal) salary FROM emp;

--3. MIN: 최소값 반환
SELECT MIN(sal) salary FROM emp;

--4. SUM : 합을 반환
SELECT SUM(sal) salary
FROM emp
WHERE deptno = 30;

--5. STDDEV: 표준편차
SELECT ROUND(STDDEV(sal), 3) salary
FROM emp
WHERE deprno = 30;

--집계함수 예
SELECT deptno 부서번호, COUNT(*) 사원수,
       MAX(sal) 최대급여, MIN(sal)최소급여,
       SUM(sal) 급여합계, ROUND(AVG(sal)) 평균급여
  FROM emp
 GROUP BY deptno
 ORDER BY SUM(sal) DESC;
 
 --SELECT GROUP BY 절
 -- 1.데이터를 원하는 그룹으로 나눌 수 있음
 -- 2.나누고자 하는 그룹의 컬럼명을 SELECT 절과 GROUP BY절 뒤에 추가하면 됨
 -- 3.집계함수와 함께 사용되는 상수는 GROUP BY절에 추가하지 않아도 된다.
 
 --ex)부서별 사원수 조회
 SELECT '2020' year, deptno 부서번호, COUNT(*) 사원수
 FROM emp
 GROUP BY deptno
 ORDER BY COUNT(*) DESC;
 
 --ex) 부서별로 그룹하여 부서번호, 인원수, 급여의 평균, 급여의 합을 조회
 SELECT deptno 부서번호, COUNT(*) 인원수, ROUND(AVG(sal)) 급여평균, SUM(sal) 급여합계
 FROM emp
 WHERE COUNT(*) > 5
 GROUP by deptno
 
 --작성 순서
 SELECT
 FROM
 WHERE
 GROUP BY
 HAVING 
 ORDER BY
 
 -- 실행 순서
 FROM
 WHERE
 GROUP BY 
 HAVING
 SELECT 
 ORDER BY
--SELECT에 HAVING 절
-- 1. WHERE절에서는 집계함수를 사용 할 수 없음
-- 2. HAVING절은 집계함수를 가지고 조건비교를 할때 사용
-- 3. HAVING절은 GROUP BY절과 함께 사용

-- ex) 사원수가 다섯명이 넘는 부서와 사원수를 조회
SELECT d.dname, COUNT(e.empno) 사원수
FROM emp e, dept d
WHERE e.deptno = d.deptno
GROUP BY dname
HAVING COUNT(e.empno) >= 5;

1. FROM : emp 전체, dept 전체
2. WHERE : emp 테이블의 deptno와 deptno에 값이 같으면 JOIN(JOIN된 14건)
SELECT * 
FROM emp e, dept d
WHERE e.deptno = d.deptno

3. GROUP BY : JOIN된 14건의 결과에서 dname컬럼의 값으로 그룹핑(3종류:ACCOUNTING, RESEARCH, SALES)
SELECT d.dname, COUNT(e.empno) 사원수
FROM emp e, dept d
WHERE e.deptno = d.deptno
GROUP BY dname

4.HAVING : 그루핑 된 3건의 결과중 사원수가 5보다 크거나 같은 2그룹(RESEARCH, SALES)
5.SELECT : 출력하고 싶은 컬럼 지정 (사원이름, 사원수)

-- VIEW 테이블
-- 1. 하나의 가상 테이블
-- 2. 실제 데이터가 저장되는 것은 아니지만 뷰를 통해 데이터를 관리 할 수 있음
-- 3. 복잡한 Query를 통해 얻을 수 있는 결과를 간단한 Query로 얻을 수 있음
-- 4. 한 개의 뷰로 여러 테이블에 대한 데이터를 검색 할 수 있음
--View 설정값
-- FORCE: 기본 테이블 유무에 관계없이 VIEW를 생성
-- WITH CHECK OPTION: VIEW에 의해 엑세스 될 수있는 행만이 입력되거나 변경 될 수 있음
-- WITH READ ONLY: SELECT만 가능한 VIEW 생성

--View 테이블 구조
-- CREAT [OR REPLACE] [FORCE|NOFORCE] VIEW view_name
-- AS subquery
-- [WITH CHECK OPTION][CONSTRAINT 제약조건]
-- [WITH READ ONLY]

-- ex) View 생성
CREAT OR REPLACE VIEW view_
AS
    SELECT e.empno, e.ename, d.dname, d.loc
    FROM emp e, dept d
    WHERE e.deptno = d.deptno;
-- WITH READ ONLY ;

SELECT * FROM view_query; 

-- 인덱스(찾기 쉽게 라벨링 작업)
--: 인덱스를 건다고 해서 무조건 성능이 좋아지는건 아니다, 역으로 나빠질수도 있다.
--: 오라클에서는 B-tree를 기반으로 인덱스를 생성함

-- 자동인덱스: PK, Unique 속성을 사용할 때 자동으로 생성되는 인덱스
-- 수동인덱스: CREATE INDEX명으로 직접 만든 인덱스

--인덱스를 사용하면 좋은 경우
-- 1. WHERE 절이나 JOIN 조건 안에서 자주 사용되는 컬럼
-- 2. Null값이 많이 포함되어 있는 컬럼
-- 3. WHERE절이나 JOIN조건에서 자주 사용되는 두개 이상의 컬럼들

--인덱스를 사용하면 안좋은 경우
-- 1. 테이블이 작은경우(데이터가 작은 경우)
-- 2. 테이블이 자주 갱신되는 경우(값이 INSERT, UPDATE, DELETE 되는 경우)

--ex) UNIQUE 인덱스 생성
CREATE UNIQUE INDEX emp_ename_indx
ON emp(ename);

--ex) 인덱스 삭제
DROP INDEX emp_ename_indx;

--Subquery(서브쿼리)
-- 1. Subquery는 다른 하나의 SQL문장의 절에 NEXTEDED된 SELECT문장
-- 2. SELECT, UPDATE, DELETE, INSERT와 같은 DML문과 CREATE TABLE또는 VIEW의 WHERE절이나 HAVING절
-- 3. Subquery는 Main Query 이전에 한번 실행
-- 4. 보통 Subquery는 괄호로 묶어야 한다.
-- 5. 단일행 연산자(=, <, >, <=, >=, <>, !=)와
--    다중행 연산자(IN, NOT IN, AMY, ALL, EXISTS)들이 서브쿼리에서 사용
-- 6. Subquery는 연산자의 오른쪽에 위치해야한다

JOB이'CLERK'인 사원의 이름과 직업을 조회

SELECT ename, job
FROM emp
WHERE job = 'CLERK';

-- 동선이 직업을 몰라!
-- 동선이 직업을 갖는 사람들을 조회 : Main Query
--    동선이 직업 조회 : Sub Query

SELECT ename, job, sal
FROM emp
WHERE job= (SELECT
            FROM emp
            WHERE ename = '동선')
            
-- ex) 부서별로 가장 급여를 많이 받는 사원의 정보를 출력

SELECT empno, ename, sal, deptno
FROM emp
WHERE sal IN (SELECT MAX(sal)
             FROM emp
             GROUP BY deptno);
             
             --내가 찾고자 하는 값이 다중 이면 IN을 사용해야 한다
-------------> SubQuery 실행후
SELECT empno, ename, sal, deptno
FROM emp
WHERE sal IN(2850, 3000, 5000);



--부서별로 가장 급여를 많이받는 사람의 연봉
SELECT MAX(sal)
FROM emp
GROUP BY deptno



-------------- 화장품 판매 사이트 
-- 상품테이블
DROP TABLE tbl_pdt;
CREATE TABLE tbl_pdt(
    pno NUMBER PRIMARY KEY,
    pname VARCHAR2(500) NOT NULL,
    ptype VARCHAR2(200),
    pmemo VARCHAR2(1000),
    price NUMBER DEFAULT 0,
    avail_cnt NUMBER DEFAULT 0,
    sale_cnt NUMBER DEFAULT 0,
    p_img VARCHAR2(300),
    regdate DATE DEFAULT SYSDATE
);

DROP SEQUENCE seq_pdt;
CREATE SEQUENCE seq_pdt
    START WITH 1
    INCREMENT BY 1
    NOCYCLE;
    
    
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'greentea 스킨','스킨','허브로 만든 저자극 스킨',14300,3,10, 'greentealoation.png');
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'greentea 로션','로션','허브로 만든 저자극 로션',14500,5,15, 'greenteatoner.png');
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'flonium 에센스','에센스','제라늄으로 만든 수분가득 에센스',25000,4,26, 'floniume.png');
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'moon flower 샴푸','샴푸',' 달맞이 꽃 향이 가득 한 샴푸',12500,3,27, 'moonflowershamp.png');
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'moon flower 린스','린스','달맞이 꽃 향이 가득 한 린스',14500,7,23, 'moonflowerli.png');
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'camellia  샴푸','샴푸','허브와 동백으로 만든 샴푸',12700,6,24, 'shampoo.png');
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'camellia  린스','린스','허브와 동백으로 만든 린스',12200,8,32, 'shampoo.png');
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'Mugunghwa 스킨','스킨','수분 가득 보습 스킨',11700,8,12, 'mogonwha (2).png');
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'Mugunghwa 로션','로션','수분 가득 보습 로션',12300,1,14, 'mogonwha (2).png');
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'lopodia 크림','크림','작약꽃 크림',24700,13,17, 'flonium.png');
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'lopodia 스킨','스킨','작약꽃 스킨',10300,5,13, 'mogonwha.png');
INSERT INTO tbl_pdt(pno, pname, ptype, pmemo, price, avail_cnt, sale_cnt, p_img)
VALUES(seq_pdt.NEXTVAL,'lopodia 로션','로션','작약꽃 로션',13300,3,22, 'lopodia.png' );



SELECT * FROM tbl_pdt;

SELECT rownum rnum, best.*
FROM(SELECT * FROM tbl_pdt
     ORDER BY sale_cnt DESC
     ) best;
     
SELECT *
FROM(SELECT rownum rnum, best.*
     FROM(SELECT * FROM tbl_pdt
          WHERE avail_cnt > 0
          ORDER BY sale_cnt DESC
          ) best
    )
WHERE rnum between 1 and 5;
SELECT COUNT(*) FROM tbl_pdt;

COMMIT;
